import React from 'react';
import type { AIDecision } from '../types';
import './ExecutiveMemo.css';

interface ExecutiveMemoProps {
  aiDecision: AIDecision;
  fileName: string;
}

const ExecutiveMemo: React.FC<ExecutiveMemoProps> = ({ aiDecision, fileName }) => {
  const getRecommendationStyle = (recommendation: string) => {
    switch (recommendation.toLowerCase()) {
      case 'pursue':
        return { backgroundColor: '#4CAF50', color: 'white' };
      case 'decline':
        return { backgroundColor: '#f44336', color: 'white' };
      default:
        return { backgroundColor: '#FF9800', color: 'white' };
    }
  };

  const getRecommendationIcon = (recommendation: string) => {
    switch (recommendation.toLowerCase()) {
      case 'pursue':
        return '‚úÖ';
      case 'decline':
        return '‚ùå';
      default:
        return '‚ö†Ô∏è';
    }
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 0.8) return '#4CAF50';
    if (score >= 0.6) return '#FF9800';
    return '#f44336';
  };

  return (
    <div className="executive-memo">
      <div className="memo-header">
        <div className="memo-title">
          <h2>üéØ Executive Decision Memo</h2>
          <p className="memo-subtitle">AI-Powered RFP Analysis for: <strong>{fileName}</strong></p>
        </div>
        <div className="recommendation-badge" style={getRecommendationStyle(aiDecision.recommendation)}>
          <span className="recommendation-icon">{getRecommendationIcon(aiDecision.recommendation)}</span>
          <span className="recommendation-text">{aiDecision.recommendation}</span>
        </div>
      </div>

      <div className="confidence-score">
        <div className="confidence-label">AI Confidence Score</div>
        <div className="confidence-bar">
          <div 
            className="confidence-fill"
            style={{ 
              width: `${aiDecision.confidence_score * 100}%`,
              backgroundColor: getConfidenceColor(aiDecision.confidence_score)
            }}
          ></div>
        </div>
        <div className="confidence-percentage" style={{ color: getConfidenceColor(aiDecision.confidence_score) }}>
          {Math.round(aiDecision.confidence_score * 100)}%
        </div>
      </div>

      <div className="memo-content">
        <div className="memo-section executive-summary">
          <h3>üìã Executive Summary</h3>
          <p>{aiDecision.executive_summary}</p>
        </div>

        <div className="memo-grid">
          <div className="memo-section key-factors">
            <h3>üîë Key Factors</h3>
            <ul>
              {aiDecision.key_factors.map((factor, index) => (
                <li key={index}>{factor}</li>
              ))}
            </ul>
          </div>

          <div className="memo-section risk-assessment">
            <h3>‚öñÔ∏è Risk Assessment</h3>
            <p>{aiDecision.risk_assessment}</p>
          </div>
        </div>

        <div className="memo-section financial-analysis">
          <h3>üí∞ Financial Analysis</h3>
          <p>{aiDecision.financial_analysis}</p>
        </div>

        <div className="memo-section next-steps">
          <h3>üöÄ Recommended Next Steps</h3>
          <ol>
            {aiDecision.next_steps.map((step, index) => (
              <li key={index}>{step}</li>
            ))}
          </ol>
        </div>
      </div>

      <div className="memo-footer">
        <p>
          <em>This analysis was generated by AI and should be reviewed by senior partners before making final decisions.</em>
        </p>
        <p className="timestamp">Generated on: {new Date().toLocaleString()}</p>
      </div>
    </div>
  );
};

export default ExecutiveMemo;